{"version":3,"sources":["components/Display/Display.module.css","components/Counter/Counter.module.css","components/Button/Button.module.css","components/Display/Display.tsx","components/Button/Button.tsx","components/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","className","s","display","displayValue","settingsMode","message","error","digit","maxValue","max","indicator","label","input","inputError","type","value","onChange","e","changeMaxValue","currentTarget","minValue","changeMinValue","Button","disabled","button","onClick","onClickHandler","descr","Counter","buttons","counter","map","b","index","callback","App","useState","setMaxValue","setMinValue","setDisplayValue","setSettingsMode","btns","setBtn","incBtn","newValue","Number","resetBtn","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,UAAY,2BAA2B,MAAQ,uBAAuB,MAAQ,uBAAuB,MAAQ,uBAAuB,WAAa,4BAA4B,IAAM,qBAAqB,QAAU,yBAAyB,MAAQ,yB,mBCAxSD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,2B,iBCA/DD,EAAOC,QAAU,CAAC,OAAS,yB,+KCadC,EAAU,SAACC,GAapB,OACI,qBAAKC,UAAWC,IAAEC,QAAlB,SACkC,oBAAtBH,EAAMI,aACVJ,EAAMK,aACF,sBAAMJ,UAAS,UAAKC,IAAEI,QAAP,YAAkBN,EAAMO,MAAQL,IAAEK,MAAQ,IAAzD,SACKP,EAAMO,MAAQ,kBAAoB,+BAGvC,sBAAMN,UAAS,UAAKC,IAAEM,MAAP,YAAgBR,EAAMI,eAAiBJ,EAAMS,SAAWP,IAAEQ,IAAM,IAA/E,SACSV,EAAMI,eAInB,qCACI,sBAAKH,UAAWC,IAAES,UAAlB,UACI,sBAAMV,UAAWC,IAAEU,MAAnB,uBACA,uBACIX,UAAS,UAAKC,IAAEW,MAAP,YAAgBb,EAAMO,MAAQL,IAAEY,WAAa,IACtDC,KAAK,SACLC,MAAOhB,EAAMS,SACbQ,SAhCI,SAACC,GAErBlB,EAAMmB,gBACHnB,EAAMmB,gBAAgBD,EAAEE,cAAcJ,aA+BjC,sBAAKf,UAAWC,IAAES,UAAlB,UACI,sBAAMV,UAAWC,IAAEU,MAAnB,uBACA,uBACIX,UAAS,UAAKC,IAAEW,MAAP,YAAgBb,EAAMO,MAAQL,IAAEY,WAAa,IACtDC,KAAK,SACLC,MAAOhB,EAAMqB,SACbJ,SAlCI,SAACC,GAErBlB,EAAMsB,gBACHtB,EAAMsB,gBAAgBJ,EAAEE,cAAcJ,mB,gBCdxCO,EAAS,SAACvB,GAMrB,OAAO,wBACLwB,SAAUxB,EAAMO,OAASP,EAAMwB,SAC/BvB,UAAWC,IAAEuB,OACbC,QAPqB,WACrB1B,EAAM2B,kBAGD,SAIF3B,EAAM4B,SCHAC,EAAgC,SAAC,GAOpC,IALFxB,EAKC,EALDA,aAAcE,EAKb,EALaA,MACdH,EAIC,EAJDA,aAAcK,EAIb,EAJaA,SACdY,EAGC,EAHDA,SAAWC,EAGV,EAHUA,eACXH,EAEC,EAFDA,eAAgBW,EAEf,EAFeA,QAItB,OACI,sBAAK7B,UAAWC,IAAE6B,QAAlB,UACE,cAAC,EAAD,CACIxB,MAAOA,EACPF,aAAcA,EACdD,aAAcA,EACdK,SAAUA,EACVY,SAAUA,EACVF,eAAgBA,EAChBG,eAAgBA,IACpB,qBAAKrB,UAAWC,IAAE4B,QAAlB,SAEKA,EAAQE,KAAI,SAACC,EAAGC,GACb,OACI,cAAC,EAAD,CACI3B,MAAOA,EAEPqB,MAAOK,EAAEL,MACTD,eAAgBM,EAAEE,SAClBX,SAAUS,EAAET,UAHPU,YCiCdE,MA9Df,WAAgB,IAAD,EACqBC,mBAAiB,GADtC,mBACJ5B,EADI,KACM6B,EADN,OAEqBD,mBAAiB,GAFtC,mBAEJhB,EAFI,KAEMkB,EAFN,OAG6BF,mBAA0BhB,GAHvD,mBAGJjB,EAHI,KAGUoC,EAHV,OAI6BH,oBAAkB,GAJ/C,mBAIJhC,EAJI,KAIUoC,EAJV,KAKLlC,EAAQc,GAAYZ,GAAYY,EAAW,EAE3CqB,EAAgB,CAClBC,OAAQ,CAACf,MAAO,MAAOO,SAiB3B,WACIM,GAAgB,IAlB4BjB,UAAWnB,GACvDuC,OAAQ,CAAChB,MAAO,MAAOO,SAoB3B,WACI,IAAMU,EAAWC,OAAO1C,GAAgB,EACrCyC,GAAYpC,GACX+B,EAAgBK,IAvB8BrB,SAAUnB,GAAiBI,IAAaL,GAC1F2C,SAAU,CAACnB,MAAO,QAASO,SA0B/B,WACIK,EAAgBnB,IA3BwCG,SAAUnB,GAAgBgB,IAAajB,IA8BnG,OACI,sBAAKH,UAAU,MAAf,UACI,cAAC,EAAD,CACIM,MAAOA,EACPF,aAAcA,EACdI,SAAUA,EACVY,SAAUA,EACVF,eAjCZ,SAAwBH,GACpByB,GAAgB,GAChBH,EAAYtB,IAgCJM,eA7BZ,SAAwBN,GACpByB,GAAgB,GAChBF,EAAYvB,GACZwB,EAAgBxB,IA2BRc,QAAS,CAACY,EAAKC,UACnB,cAAC,EAAD,CACIpC,MAAOA,EACPF,aAAcA,EACdD,aAAcA,EACdK,SAAUA,EACVqB,QAAS,CAAEY,EAAKE,OAAQF,EAAKK,gBCtD9BC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2dd43acf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__Igj-A\",\"indicator\":\"Display_indicator__2igVl\",\"digit\":\"Display_digit__pLFMb\",\"label\":\"Display_label__39Uko\",\"input\":\"Display_input__2IP5W\",\"inputError\":\"Display_inputError__1KHRo\",\"max\":\"Display_max__1NlQJ\",\"message\":\"Display_message__mMWog\",\"error\":\"Display_error__3NT_A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__1kAiJ\",\"buttons\":\"Counter_buttons__34TYF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2vNY5\"};","import React, {ChangeEvent} from 'react';\r\nimport s from './Display.module.css';\r\n\r\n\r\ntype DisplayType = {\r\n    error: boolean\r\n    settingsMode: boolean\r\n    displayValue?: number | string\r\n    maxValue?: number\r\n    minValue?: number\r\n    changeMaxValue?: (value: number) => void\r\n    changeMinValue?: (value: number) => void\r\n}\r\n\r\nexport const Display = (props: DisplayType) => {\r\n    const onChangeMaxCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        {\r\n            props.changeMaxValue\r\n            && props.changeMaxValue(+e.currentTarget.value);\r\n        }\r\n    }\r\n    const onChangeMinCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        {\r\n            props.changeMinValue\r\n            && props.changeMinValue(+e.currentTarget.value);\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.display}>\r\n            {typeof props.displayValue != \"undefined\" ? (\r\n                props.settingsMode ? (\r\n                    <span className={`${s.message} ${props.error ? s.error : \"\"}`}>\r\n                        {props.error ? \"invalid values!\" : \"enter values and press set\"}\r\n                        </span>\r\n                ) : (\r\n                    <span className={`${s.digit} ${props.displayValue === props.maxValue ? s.max : \"\"}`}>\r\n                            {props.displayValue}\r\n                        </span>\r\n                )\r\n            ) : (\r\n                <>\r\n                    <div className={s.indicator}>\r\n                        <span className={s.label}>max value</span>\r\n                        <input\r\n                            className={`${s.input} ${props.error ? s.inputError : \"\"}`}\r\n                            type=\"number\"\r\n                            value={props.maxValue}\r\n                            onChange={onChangeMaxCallback}/>\r\n                    </div>\r\n                    <div className={s.indicator}>\r\n                        <span className={s.label}>min value</span>\r\n                        <input\r\n                            className={`${s.input} ${props.error ? s.inputError : \"\"}`}\r\n                            type=\"number\"\r\n                            value={props.minValue}\r\n                            onChange={onChangeMinCallback}/>\r\n                    </div>\r\n                </>\r\n            )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Button.module.css';\r\n\r\ntype ButtonType = {\r\n  descr: string\r\n  disabled: boolean\r\n  onClickHandler: () => void\r\n  error: boolean\r\n}\r\n\r\nexport const Button = (props: ButtonType) => {\r\n\r\n  const onClickHandler = () => {\r\n    props.onClickHandler();\r\n  }\r\n\r\n  return <button\r\n    disabled={props.error || props.disabled}\r\n    className={s.button}\r\n    onClick={onClickHandler}>\r\n      {props.descr}\r\n    </button>\r\n}","import React from 'react';\r\nimport s from './Counter.module.css';\r\nimport {Display} from \"../Display/Display\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {BtnType} from \"../../App\";\r\n\r\ntype CounterType = {\r\n    error: boolean\r\n    settingsMode: boolean\r\n    displayValue?: number | string\r\n    maxValue?: number\r\n    minValue?: number\r\n    changeMaxValue?: (value: number) => void\r\n    changeMinValue?: (value: number) => void\r\n    buttons: BtnType[]\r\n}\r\n\r\nexport const Counter:React.FC<CounterType> = (\r\n    {\r\n        settingsMode, error,\r\n        displayValue, maxValue,\r\n        minValue , changeMinValue,\r\n        changeMaxValue, buttons\r\n    }\r\n    ) => {\r\n\r\n  return(\r\n      <div className={s.counter}>\r\n        <Display\r\n            error={error}\r\n            settingsMode={settingsMode}\r\n            displayValue={displayValue}\r\n            maxValue={maxValue}\r\n            minValue={minValue}\r\n            changeMaxValue={changeMaxValue}\r\n            changeMinValue={changeMinValue}/>\r\n        <div className={s.buttons}>\r\n\r\n            {buttons.map((b, index) => {\r\n                return(\r\n                    <Button\r\n                        error={error}\r\n                        key={index}\r\n                        descr={b.descr}\r\n                        onClickHandler={b.callback}\r\n                        disabled={b.disabled} />\r\n                )\r\n            })}\r\n        </div>\r\n      </div>\r\n  )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Counter} from \"./components/Counter/Counter\";\r\n\r\ntype BtnsType = {\r\n    [key: string]: BtnType\r\n};\r\nexport type BtnType = {\r\n    descr: string\r\n    callback: () => void\r\n    disabled: boolean\r\n}\r\n\r\nfunction App() {\r\n    const [maxValue, setMaxValue] = useState<number>(5);\r\n    const [minValue, setMinValue] = useState<number>(0);\r\n    const [displayValue, setDisplayValue] = useState<number | string>(minValue);\r\n    const [settingsMode, setSettingsMode] = useState<boolean>(false);\r\n    const error = minValue >= maxValue || minValue < 0;\r\n\r\n    const btns:BtnsType = {\r\n        setBtn: {descr: \"set\", callback: setValues, disabled: !settingsMode},\r\n        incBtn: {descr: \"inc\", callback: incDisplayValue, disabled: settingsMode ||  maxValue === displayValue},\r\n        resetBtn: {descr: \"reset\", callback: resetDisplayValue, disabled: settingsMode || minValue === displayValue},\r\n    }\r\n\r\n\r\n    function changeMaxValue(value: number) {\r\n        setSettingsMode(true);\r\n        setMaxValue(value);\r\n    }\r\n\r\n    function changeMinValue(value: number) {\r\n        setSettingsMode(true)\r\n        setMinValue(value);\r\n        setDisplayValue(value);\r\n    }\r\n\r\n    function setValues() {\r\n        setSettingsMode(false);\r\n    }\r\n\r\n    function incDisplayValue() {\r\n        const newValue = Number(displayValue) + 1;\r\n        if(newValue <= maxValue) {\r\n            setDisplayValue(newValue);\r\n        }\r\n    }\r\n\r\n    function resetDisplayValue() {\r\n        setDisplayValue(minValue);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Counter\r\n                error={error}\r\n                settingsMode={settingsMode}\r\n                maxValue={maxValue}\r\n                minValue={minValue}\r\n                changeMaxValue={changeMaxValue}\r\n                changeMinValue={changeMinValue}\r\n                buttons={[btns.setBtn] } />\r\n            <Counter\r\n                error={error}\r\n                settingsMode={settingsMode}\r\n                displayValue={displayValue}\r\n                maxValue={maxValue}\r\n                buttons={[ btns.incBtn, btns.resetBtn ]}\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}